#####################SLIP-1###################################
Q 1. Write a C program that accepts the vertices and edges of a graph and stores it as an
adjacency matrix. Display the adjacency matrix.
->>>
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int a[100][100],i,j,n;
 printf("Enter Limit-");
 scanf("%d",&n);
 printf("Enter Adjecency Matrix-");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
  {
   a[i][j]=0;
   if(i!=j)              //Create
   {
    scanf("%d",&a[i][j]);
   }
  }
 }
 
 for(i=1;i<=n;i++)
 {
  printf("V%d\t",i);
 }
 
 for(i=1;i<=n;i++)
 {
  printf("\nV%d\t",i);
  for(j=1;j<=n;j++)
  {
   printf("%d\t",a[i][j]);
  }
 }
}

Q 2. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert,
preorder. Write a menu driven program that performs the above operations.
->
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
 int data;
 struct node*left,*right;
}NODE;

NODE *create(NODE *root)
{
 int i,n;
 struct node *newnode,*temp,*parent;
 printf("Enter Limit-");
 scanf("%d",&n);
 for(i=0;i<n;i++)
 {
  newnode=(struct node *)malloc(sizeof(struct node));
  printf("Enter Value-");
  scanf("%d",&newnode->data);
  newnode->left=NULL;
  newnode->right=NULL;
  if(root==NULL)
  {
   root=newnode;
   continue;
  }
  temp=root;
  while(temp!=NULL)
  {
   parent=temp;
   if(newnode->data<temp->data)
   temp=temp->left;
   else
   temp=temp->right;
  }
  if(newnode->data<parent->data)
  parent->left=newnode;
  else
  parent->right=newnode;
 }
 return root;
}

void preorder(NODE *root)
{
 NODE *temp=root; ///////////vvvvvvvvvvvvvvvvimp
 if(temp!=NULL)
 {
  printf("%d\t",temp->data);
  preorder(temp->left);
  preorder(temp->right);
 }
}

int main()
{
 int i,ch;
 NODE *root=NULL;
 do
 {
 printf("\n1-CREATE 2-DISPLAY \nENTER CHOICE-");
 scanf("%d",&ch);
  for(j=1;j<=n;j++)
  {

 switch(ch)
 {
  case 1: root=create(root);
        break;
  case 2: preorder(root);
        break;
 }
 }while(ch<3);
}
***************************OR************
   Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
   
  #################
  no no no no
  #############SLIP-2###########################
Q1. Write a C program for the implementation of Topological sorting.
[15 Marks]
Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an
adjacency matrix. Display the adjacency matrix.
[15 Marks]
->>>>>>>>>>>

->REPEAT..................
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacency matrix. Implement function to traverse the graph using Depth First Search (DFS)
traversal

##################SLIP-3=##########################
Q 1. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
//PRIMS
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int i,j,k,n,p,q,u,v,min,mincost=0;
 int a[100][100],visited[10];
 printf("Enter Limit-");
 scanf("%d",&n);
 printf("Enter Adj Matrix-");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
  {
   scanf("%d",&a[i][j]);
   if(a[i][j]==0)
   a[i][j]=999;
  }
 }

for(i=1;i<=n;i++)
{
 visited[i]=0;
}
visited[1]=1;
for(k=1;k<=n;k++)
{
 min=999;
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
  {
   if(a[i][j]<min&&visited[j]==0)
   {
   min=a[i][j];
   u=i;
   v=j;
   }
  } 
 }
 if(visited[u]==0||visited[v]==0)
 {
  printf("\nEdge-%d-(%d,%d) cost-%d",k,u,v,min);
  mincost=mincost+min;
  visited[v]=1;
 }
 a[u][v]=a[v][u]=999;
}
printf("\nMInimum cost-%d",mincost);
}
[15 Marks]
Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an
adjacency matrix. Display the adjacency matrix.
[15 Marks]
->REPEAT..............
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int a[100][100],i,j,n;
 printf("Enter Limit-");
 scanf("%d",&n);
 printf("Enter Adjecency Matrix-");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
  {
   a[i][j]=0;
   if(i!=j)              //Create
   {
    scanf("%d",&a[i][j]);
   }
  }
 }
 
 for(i=1;i<=n;i++)
 {
  printf("V%d\t",i);
 }
 
 for(i=1;i<=n;i++)
 {
  printf("\nV%d\t",i);
  for(j=1;j<=n;j++)
  {
   printf("%d\t",a[i][j]);
  }
 }
}

OR
Q 2. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all
pairs shortest path using adjacency cost matrix

####################SLIP-4###########################
Q 1. Write a C program that accepts the vertices and edges of a graph. Create adjacency list.
[15 Marks]
->
#include<stdio.h>
#include<stdlib.h>
typedef struct node 
{
 int data;
 struct node *next;
}NODE;
NODE *head[10];

void create(int a[10][10],int n)    //vvvvvvvvvvvvvvvvvv //IMP VOID 
{
 int i,j;
 NODE *newnode,*temp;
 for(i=1;i<=n;i++)
 {
  head[i]=NULL;
  for(j=1;j<=n;j++)
  {
   if(a[i][j]==1)
   {
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=j;
    newnode->next=NULL;
    
    if(head[i]==NULL)
    {
     head[i]=newnode;   //sequence imp
     temp=newnode;
    }
    else
    {
     temp->next=newnode;
     temp=newnode;
    }
   }
  }
 }
}

void display(int n)
{
 int i;
 NODE *temp;
 for(i=1;i<=n;i++)
 {
  printf("\n Head%d->",i);
  for(temp=head[i];temp!=NULL;temp=temp->next)
  {
   printf("%d->",temp->data);
  }
  printf("NULL");
 }
}
int main()
{
 int i;
 NODE *head=NULL;
 int a[10][10],j,n;
 printf("Enter Limit-");
 scanf("%d",&n);
 printf("Enter Graph in the form of adjecency matrix");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
  {
   scanf("%d",&a[i][j]);                ///t n ghene
  }
 }
 create(a,n);
 display(n);
 
}
Q 2. Write a program which uses binary search tree library and counts the total nodes and
total leaf nodes in the tree.
int countLeaf(T) – returns the total number of leaf nodes from BST.
[15 Marks]
->>>>>>>>
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
 int data;
 struct node *left,*right;
}NODE;
NODE *create(NODE *root)
{
 int i,n;
 NODE *newnode,*temp,*parent;
 printf("Enter Limit-");
 scanf("%d",&n);
 for(i=0;i<n;i++)
 {
  newnode=(struct node *)malloc(sizeof(struct node));
  printf("Enter Value-");
  scanf("%d",&newnode->data);
  newnode->left=NULL;
  newnode->right=NULL;
  if(root==NULL)
  {
   root=newnode;
   continue;
  }
  temp=root;
  while(temp!=NULL)
  {
   parent=temp;
   if(newnode->data<temp->data)
   temp=temp->left;
   else
   temp=temp->right;
  }
  if(newnode->data<parent->data)
  parent->left=newnode;
  else
  parent->right=newnode;
 }
 return root;
}

//IN THIS QUESTION WE RETURN VALUE BECAUSE OF RECURSION..
//IF WE PRINTF OUTPUT WITHOUT RETURN PRINT OUTPUT IN MANY TIMES........................
int leafnode(NODE *root)
{
 static int cnt1=0,q; //static int vvvvvvvvvvvvvvvimp
 NODE *temp=root;
 if(temp!=NULL)
 {
  if(temp->left==NULL&&temp->right==NULL)
  {                           // RECURSION
   cnt1++;
  }           ///vvvvvvvvvvvvvvvvvimp
  leafnode(temp->left);
  leafnode(temp->right);
 }
 return cnt1;
 }

int totalnode(NODE *root)
{
 static int cnt2=0,p;  //////static vvvvvvvvvvvvvvvvvvvvvvvvvimp           //RECURSION
 NODE *temp=root; ///vvvvvvvvvvvvvvvvvimp temp=root
 if(temp!=NULL)
 {
  cnt2++;              //not use loop.........
  totalnode(temp->left);
  totalnode(temp->right);
 }
 return cnt2;
 }

int main()
{
 int p,q;
 NODE * root=NULL;
 root=create(root);
 p=leafnode(root);
 printf("\nTotal Leaf Node-%d",p);
 q=totalnode(root);
 printf("\nTotal  Node-%d",q);
}

OR
Q 2. Write a C program for the implementation of Topological sorting. [15 Marks]

####################SLIP 5=#############################
Q 1. Write a C program which uses Binary search tree library and displays nodes at each level,count
of node at each level.
[15 Marks]
->>>>>>>>>>>
#include<stdio.h>
#include<stdlib.h>
#define MAX 100
typedef struct node
{
 int data;
 struct node *left,*right;
}NODE;
struct Queue
{
 struct node *a[MAX];
 int front,rear;
}q;

void initq()
{
 q.front=q.rear=-1;
}
int isempty()
{
 if(q.front==-1||q.front>q.rear)
 return 1;
 else
 return 0;
}
int isfull()
{
 if(q.rear==MAX-1)
 return 1;
 else
 return 0;
}

void addq(NODE *root)
{
 if(isfull())
 printf("Queue is full..");
 else
 {
  if(q.front==-1)
  q.front++;
  q.rear++;
  q.a[q.rear]=root;
 }
}

NODE *delq()
{
 NODE *temp;
 if(isempty())
 printf("Queue is empty......");
 else
 {
  temp=q.a[q.front];
  q.front++;
 }
 return temp; //VIMPPPPPPPPPPPPPPP
}
#include"BST.h"
void preorder(NODE *root)
{
 NODE *temp=root;
 if(temp!=NULL)
 {
  printf("%d\t",temp->data);
  preorder(temp->left);
  preorder(temp->right);
 }
}
void levelorder(NODE *root)
{
 int cnt=0,p=0;
 NODE *temp;
 addq(root);
 addq(NULL);
 printf("\nLevel-%d-",cnt);
 while(!isempty())
 {
 temp=delq();
 if(temp==NULL)
 {
 printf("\nNO OF NODE=%d",p); //PN TEMP NULL ZALYAVARACH P PRINT  HOTO................
 p=0;
  cnt++;
  if(!isempty())
  {
   addq(NULL);
   printf("\nLevel-%d-",cnt);
  }
 }
 else
 {
  printf("%d\t",temp->data);//VALUE PRINT ZALI KA LAGECH P++ HOTO 
  p++;
  if(temp->left!=NULL)
   addq(temp->left);
  if(temp->right!=NULL)
   addq(temp->right);
 }
 }
}

int main()
{
 initq();
 int i;
 NODE *root=NULL;
 root=create(root);
 preorder(root);
 levelorder(root);
}
Q 2. Write a program to sort n randomly generated elements using Heapsort method.
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an adjacency
matrix. Implement function to traverse the graph using Breadth First Search (BFS) traversal.
->>>>>>>>>>>>>
//bfs
#include<stdio.h>
#include<stdlib.h>
#define MAX 20
struct Queue
{
 int a[MAX];
 int front,rear;
}q;

void init()
{
 q.front=q.rear=-1;
}

int isempty()
{
 if(q.front==-1||q.front>q.rear)
 return 1;
 else
 return 0;
}
int isfull()
{
 if(q.rear==MAX-1)
 return 1;
 else
 return 0;
}

void addq(int num)
{
if(isfull())
printf("Q is fulll");
else
{
 if(q.front==-1)
 q.front++;
 q.rear++;
 q.a[q.rear]=num;
}
}
int delq()
{
int val;
if(isempty())
printf("Q is empty");
else
{
 val=q.a[q.front];
 q.front++;
}
return val;
}

void bfs(int a[100][100],int n)
{
 int visited[10],i,j;

 for(i=1;i<=n;i++)
 {
  visited[i]=0;
 }
 visited[1]=1;
 addq(1);
 while(!isempty())
 {
  i=delq();
  printf("V%d\t",i);
  for(j=1;j<=n;j++)
  {
   if(a[i][j]==1&&visited[j]==0)
   {
    addq(j);
    visited[j]=1;
   }
  }
 }
}
int main()
{
 init();         //vvvvvvvvvvvvvimp
int a[100][100],visited[10],n,i,j;
printf("enter number of vertex:");
scanf("%d",&n);
printf("enter matrix:");
for(i=1;i<=n;i++)
{
 for(j=1;j<=n;j++)
  {
   scanf("%d",&a[i][j]);
  }
}
bfs(a,n);
}

#SLIP -6
Q 1. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
[15 Marks]
Q 2. Write a C program for the implementation of Dijkstra’s shortest path algorithm for findingshortest path
from a given source vertex using adjacency cost matrix.
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an adjacency
matrix. Display the adjacency matrix.
->REPEAT.............
SLIP -7
Q 1. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all pairs
shortest path using adjacency cost matrix.
[15 Marks]
Q2. Write a program to sort n randomly generated elements using Heap sort method. [15 Marks]
OR
Q 2. Write a C program which uses Binary search tree library and displays nodes at each level,
and total levels in the tree.
->REPEAT..................
#SLIP-8
Q 1. Write a program to sort n randomly generated elements using Heapsort method. [15 Marks]
Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an adjacency
matrix. Implement functions to print indegree of all vertices of graph.

#SLIP-9
Q 1. Write a C program that accepts the vertices and edges of a graph. Create adjacency list
anddisplay the adjacency list.
->REPEAT.............
[15 Marks]
Q 2. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert,
postorder. Write a menu driven program that performs the above operations.
[15 Marks]
->REPEAT....................
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Depth First Search (BFS)
traversal.

#SLIP-10
Q 1. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert,
inorder. Write a menu driven program that performs the above operations. [15 Marks]
->REPEAT..........
Q 2. Write a C program that accepts the vertices and edges of a graph. Create adjacency list
and display the adjacency list.
->REPEAT..................
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacency matrix. Implement function to traverse the graph using Breadth First Search (BFS)

#SLIP-11
Q 1. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all pairs
shortest path using adjacency cost matrix.
[15 Marks]
Q 2. Write a C program that accepts the vertices and edges of a graph. Create adjacency list
anddisplay the adjacency list.
->REPEAT..................
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacency matrix. Implement function to traverse the graph using Depth First Search (DFS)
traversal.

SLIP-12
Q 1. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert,
preorder. Write a menu driven program that performs the above operations. [15 Marks]
->REPEAT....................
Q 2. Write a C program for the implementation of Topological sorting.
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an adjacency
matrix. Implement functions to print indegree, outdegree and total degree of all vertices of
graph.
->
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int a[100][100],i,j,in,out,n;
 printf("Enter Number of vertices-");
 scanf("%d",&n);
 printf("Enter Adjecency Matrix-");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
  {
   scanf("%d",&a[i][j]);
  }
 }
 
 for(i=1;i<=n;i++)
 {
  in=0;
  out=0;
  for(j=1;j<=n;j++)
  {
   in=in+a[j][i];
   out=out+a[i][j];
  }
  printf("\nV%d\tIndegree-%d\tOutdegree-%d\tTotaldegree-%d",i,in,out,in+out);
 }
}
#SLIP-13
Q 1. Write a C program for the Implementation of Kruskal’s Minimum spanning tree algorithm.
[15 Marks]
Q 2. Write a program which uses binary search tree library and counts the total nodes and
total leaf nodes in the tree.
int countLeaf(T) – returns the total number of leaf nodes from BST
->REPEAT.................
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Breadth First Search (BFS)
traversal.

#SLIP-14
Q 1. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all pairs
shortest path using adjacency cost matrix.
[15 Marks]
Q2. Write a menu driven program to implement hash table using array (insert, search,
display). Use any of the above-mentioned hash functions. In case of collision apply linear
probing.
[15 Marks]
->>>>>>>>>>
REPEAT
OR
Q 2. Write a C program which uses Binary search tree library and displays nodes at each level,
and total levels in the tree.
->REPEAT..................
#SLIP-15
Q 1. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
[15 Marks]
Q 2. Write a C program for the implementation of Dijkstra’s shortest path algorithm for finding shortest
path from a given source vertex using adjacency cost matrix.
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencylist. Implement function to traverse the graph using Breadth First Search (BFS)
traversal.

#SLIP-16
Q 1. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all pairs
shortest path using adjacency cost matrix.
[15 Marks]
Q2. Write a program to sort n randomly generated elements using Heapsort method. [15 Marks]
OR
Q 2. Write a C program which uses Binary search tree library and displays nodes at each level,
and total levels in the tree.
->REPEAT................
#SLIP-17
Q1. Write a menu driven program to implement hash table using array (insert, delete,display).
Use any of the above-mentioned hash functions. In case of collision apply linear probing.
[15 Marks]
->>>>>>>>>>
/*Write a menu driven program to implement hash table using array (insert, delete,display).
Use any of the above-mentioned hash functions. In case of {collision} apply linear probing.*/
#include<stdio.h>
#include<stdlib.h>
int ht[10];
void init()
{
 int i;
 for(i=0;i<10;i++)
 {
  ht[i]=-1;
 }
}
int hash(int num,int i)
{ 
 return (num%10+i)%10;
}
void insert(int num)
{
 int i,index;
 for(i=0;i<10;i++)
 {
 index=hash(num,i);  //if 0 is occupied then i=1,2,3.........
 if(ht[index]==-1)    //if madhe jat nahii mg i++ hoto....
 {
  ht[index]=num;
  break;    //vvvvvvvvvvvvvvvvvvvvvvvvvimp.........
 }
 } 
}
void delete(int num)
{
 int index,i,p;
 for(i=0;i<10;i++)
 {
 index=hash(num,i);
 if(ht[index]==num)
 {
  p=index;
  break;
 }
 }
  if(ht[p]==-1)
  printf("not found.....");
  else
  {
   ht[p]=-1;
   printf("Delete succ..........");
  }
 }
//OR WE USE SEARCH FUNCTION AND RETURN INDEX 
//AND CALL SEARCH IN DELETE AND CHECK INDEX AND DELETE IT......
/*
int search(int num)
{
 int index;
 for(i=0;i<10;i++)
 {
 index=hash(num,i);
 if(ht[index]==num)
 {
 return index;
 }
 }
 
 void delete(int num)
 {
 index=search(num);
  if(ht[index]==num)
  {
   ht[index]=-1;
   printf("Delete succ.....");
  }
  else
  printf("Not Found..");
  }

*/
void display()
  {
   int i,n;
   for(i=0;i<10;i++)
   {
    printf("%d\t",ht[i]);
   }
  }
int main()
{
 int ch,num;
 init();
 do
 {
  printf("\n1-INSERT\n2-DELETE \n3-DISPALY");
  printf("\nEnter Your Choice-");
  scanf("%d",&ch);
  switch(ch)
  {
   case 1:printf("Enter Number-");
        scanf("%d",&num);
        insert(num);
        break;
  case 2:printf("Enter Number-");
       scanf("%d",&num);
       delete(num);
       break;
  case 3:display();
  }
 }while(ch<4);
}
    



Q2. Write a program to sort n randomly generated elements using Heapsort method. [15 Marks]
OR
Q 2. Write a C program which uses Binary search tree library and displays nodes at each level,
and total levels in the tree.
#slp 18
Q 1. Write a C program that accepts the vertices and edges of a graph and stores it as an adjacency
matrix. Display the adjacency matrix.
[15 Marks]
Q 2. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert,
in order. Write a menu driven program that performs the above operations.
[15 Marks]
OR
Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
#SLIP 19
Q 1. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert, in
order. Write a menu driven program that performs the above operations.
[15 Marks]
->REPEAT.................
Q 2. Write a C program that accepts the vertices and edges of a graph. Create adjacency list
anddisplay the adjacency list.
[15 Marks]
->REPEAT.....................
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Depth First Search (DFS)
traversal.
#SLIP -20
Q 1. Write a C program for the Implementation of Kruskal’s Minimum spanning tree algorithm.
[15 Marks]
Q 2. Write a program which uses binary search tree library and count the total nodes and
total leaf nodes in the tree.
int countLeaf(T) – returns the total number of leaf nodes from BST
[15 Marks]
->REPEAT.....................
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Breadth First Search (BFS)
traversal.
#SLIP -21
Q 1. Write a C program for the implementation of Dijkstra’s shortest path algorithm for
findingshortest path from a given source vertex using adjacency cost matrix.
[15 Marks]
Q 2. Write a program which uses binary search tree library and counts the total nodes and
total leaf nodes in the tree.
int count Leaf(T) – returns the total number of leaf nodes from BST
[15 Marks]
->REPEAT...............
OR
Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
#SLIP -22
Q 1. Write a C program that accepts the vertices and edges of a graph. Create adjacency
list and display the adjacency list.
[15 Marks]
->REPEAT.............
Q 2. Implement a Binary search tree (BST) library (btree.h) with operations – create, insert,
postorder. Write a menu driven program that performs the above operations.
[15 Marks]
->REPEAT..................
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Depth First Search (DFS)
traversal.

#SLIP 23
Q 1. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
[15 Marks]
Q 2. Write a C program that accepts the vertices and edges of a graph and stores it as an
adjacency matrix. Display the adjacency matrix.
[15 Marks]
->REPEAT.....................
OR
Q 2. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all
pairs shortest path using adjacency cost matrix.
#SLIP -24
Q 1. Write a program to sort n randomly generated elements using Heap sort method. [15 Marks]
Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.
[15 Marks]
OR
Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an adjacency
matrix. Implement functions to print indegree of all vertices of graph.
->REPEAT.................
#SLIP -25
Q 1. Write a C program for the implementation of Floyd Warshall’s algorithm for finding all pairs
shortest path using adjacency cost matrix.
[15 Marks]
Q2. Write a program to sort n randomly generated elements using Heapsort method. [15 Marks]
OR
Q 2. Write a C program which uses Binary search tree library and displays nodes at each level,
and total levels in the tree.
->REPEAT...............
